{
  "name": "HR Automation System - No FS",
  "nodes": [
    {
      "parameters": {
        "formTitle": "HR Job Posting System",
        "formDescription": "Create a new job posting with automated recruitment pipeline",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Company Name",
              "requiredField": true
            },
            {
              "fieldLabel": "Job Title",
              "requiredField": true
            },
            {
              "fieldLabel": "Job Description",
              "fieldType": "textarea"
            },
            {
              "fieldLabel": "Resume Collection Limit Type",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Number Limit",
                    "value": "number"
                  },
                  {
                    "option": "Time Limit",
                    "value": "time"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Resume Limit Number",
              "fieldType": "number",
              "fieldOptions": {
                "defaultValue": 1000
              }
            },
            {
              "fieldLabel": "Time Limit Days",
              "fieldType": "number",
              "fieldOptions": {
                "defaultValue": 7
              }
            }
          ]
        },
        "options": {}
      },
      "name": "Job Posting Form",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2,
      "position": [
        200,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Store job details using workflow static data\
const jobData = {\
  job_id: `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\
  company_name: $input.first().json.data['Company Name'],\
  job_title: $input.first().json.data['Job Title'],\
  job_description: $input.first().json.data['Job Description'],\
  limit_type: $input.first().json.data['Resume Collection Limit Type'],\
  limit_value: $input.first().json.data['Resume Collection Limit Type'] === 'number' ? \
    ($input.first().json.data['Resume Limit Number'] || 1000) : \
    ($input.first().json.data['Time Limit Days'] || 7),\
  status: 'active',\
  created_date: new Date().toISOString(),\
  resume_count: 0,\
  candidates: []\
};\
\
// Store in workflow static data (simulates database)\
const currentJobs = $workflow.staticData.jobs || [];\
currentJobs.push(jobData);\
$workflow.staticData.jobs = currentJobs;\
\
// Initialize other data structures\
if (!$workflow.staticData.candidates) {\
  $workflow.staticData.candidates = [];\
}\
if (!$workflow.staticData.interviews) {\
  $workflow.staticData.interviews = [];\
}\
if (!$workflow.staticData.email_templates) {\
  $workflow.staticData.email_templates = {\
    shortlisted: `<h2>ðŸŽ‰ Congratulations!</h2><p>Dear {{name}},</p><p>You've been selected for the next round! Your ATS Score: {{score}}/100</p><p>Best regards, HR Team</p>`,\
    rejected: `<h2>Thank You</h2><p>Dear {{name}},</p><p>Thank you for applying. We'll keep your profile for future opportunities.</p><p>Best regards, HR Team</p>`\
  };\
}\
\
return [{\
  json: {\
    success: true,\
    job_id: jobData.job_id,\
    message: 'Job details stored successfully',\
    jobData: jobData\
  }\
}];"
      },
      "name": "Store Job Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.linkedin.com/v2/posts",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer LINKEDIN_ACCESS_TOKEN_PLACEHOLDER"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\
  \\"author\\": \\"urn:li:organization:COMPANY_ID_PLACEHOLDER\\",\
  \\"lifecycleState\\": \\"PUBLISHED\\",\
  \\"specificContent\\": {\
    \\"com.linkedin.ugc.ShareContent\\": {\
      \\"shareCommentary\\": {\
        \\"text\\": \\"ðŸš€ We're hiring! \\" + $json.jobData.job_title + \\" at \\" + $json.jobData.company_name + \\"\\\
\\\
\\" + $json.jobData.job_description + \\"\\\
\\\
#hiring #jobs #career\\"\
      },\
      \\"shareMediaCategory\\": \\"NONE\\"\
    }\
  },\
  \\"visibility\\": {\
    \\"com.linkedin.ugc.MemberNetworkVisibility\\": \\"PUBLIC\\"\
  }\
}",
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxAttempts": 2
          }
        }
      },
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        640,
        300
      ]
    },
    {
      "parameters": {
        "responseBody": "={\
  \\"success\\": true,\
  \\"message\\": \\"Job posted successfully\\",\
  \\"job_id\\": \\"{{ $json.jobData.job_id }}\\",\
  \\"resume_webhook_url\\": \\"{{ $execution.resumeUrl }}/webhook/submit-resume\\"\
}",
        "options": {}
      },
      "name": "Job Form Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        860,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "submit-resume",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Resume Submission Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        200,
        600
      ]
    },
    {
      "parameters": {
        "functionCode": "// Validate resume submission using static data\
const submissionData = $input.first().json;\
const jobId = submissionData.job_id;\
\
if (!jobId) {\
  return [{\
    json: {\
      success: false,\
      error: 'Job ID is required'\
    }\
  }];\
}\
\
// Load jobs from static data\
const jobs = $workflow.staticData.jobs || [];\
const job = jobs.find(j => j.job_id === jobId);\
\
if (!job) {\
  return [{\
    json: {\
      success: false,\
      error: 'Job not found'\
    }\
  }];\
}\
\
if (job.status !== 'active') {\
  return [{\
    json: {\
      success: false,\
      error: 'Job is no longer accepting applications'\
    }\
  }];\
}\
\
// Check limits\
let limitReached = false;\
\
if (job.limit_type === 'number') {\
  if (job.resume_count >= job.limit_value) {\
    limitReached = true;\
  }\
} else if (job.limit_type === 'time') {\
  const createdDate = new Date(job.created_date);\
  const currentDate = new Date();\
  const daysDiff = Math.ceil((currentDate - createdDate) / (1000 * 60 * 60 * 24));\
  \
  if (daysDiff > job.limit_value) {\
    limitReached = true;\
  }\
}\
\
if (limitReached) {\
  // Update job status\
  const jobIndex = jobs.findIndex(j => j.job_id === jobId);\
  if (jobIndex !== -1) {\
    jobs[jobIndex].status = 'closed';\
    $workflow.staticData.jobs = jobs;\
  }\
  \
  return [{\
    json: {\
      success: false,\
      error: 'Application deadline has passed or maximum applications reached'\
    }\
  }];\
}\
\
return [{\
  json: {\
    success: true,\
    job_id: jobId,\
    job: job,\
    submissionData: submissionData\
  }\
}];"
      },
      "name": "Validate Resume Submission",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        600
      ]
    },
    {
      "parameters": {
        "functionCode": "// Store resume and candidate data in static data\
const data = $input.first().json;\
const jobId = data.job_id;\
const submissionData = data.submissionData;\
\
// Create candidate object\
const candidateId = `candidate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\
const candidate = {\
  candidate_id: candidateId,\
  job_id: jobId,\
  name: submissionData.name,\
  email: submissionData.email,\
  phone: submissionData.phone,\
  resume_text: submissionData.resume_text || '',\
  submission_date: new Date().toISOString(),\
  ats_score: 0,\
  interview_score: 0,\
  combined_score: 0,\
  status: 'submitted'\
};\
\
// Store in static data\
const candidates = $workflow.staticData.candidates || [];\
candidates.push(candidate);\
$workflow.staticData.candidates = candidates;\
\
// Update job resume count\
const jobs = $workflow.staticData.jobs || [];\
const jobIndex = jobs.findIndex(j => j.job_id === jobId);\
if (jobIndex !== -1) {\
  jobs[jobIndex].resume_count += 1;\
  jobs[jobIndex].candidates.push(candidateId);\
  $workflow.staticData.jobs = jobs;\
}\
\
return [{\
  json: {\
    success: true,\
    message: 'Resume submitted successfully',\
    candidate_id: candidateId,\
    candidate: candidate\
  }\
}];"
      },
      "name": "Store Resume Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        600
      ]
    },
    {
      "parameters": {
        "responseBody": "={\
  \\"success\\": {{ $json.success }},\
  \\"message\\": \\"{{ $json.message }}\\",\
  \\"candidate_id\\": \\"{{ $json.candidate_id }}\\"\
}",
        "options": {}
      },
      "name": "Resume Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        860,
        600
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "name": "ATS Scoring Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        900
      ]
    },
    {
      "parameters": {
        "functionCode": "// Load candidates that need ATS scoring from static data\
const candidates = $workflow.staticData.candidates || [];\
\
// Filter candidates that need ATS scoring\
const pendingCandidates = candidates.filter(c => \
  c.status === 'submitted' && c.ats_score === 0\
);\
\
if (pendingCandidates.length === 0) {\
  return [{\
    json: {\
      success: false,\
      message: 'No pending candidates for ATS scoring',\
      candidates: []\
    }\
  }];\
}\
\
// Return candidates for batch processing\
return pendingCandidates.map(candidate => ({ json: { candidate } }));"
      },
      "name": "Load Pending Candidates",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        900
      ]
    },
    {
      "parameters": {
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\
  \\"model\\": \\"llama3-8b-8192\\",\
  \\"messages\\": [\
    {\
      \\"role\\": \\"system\\",\
      \\"content\\": \\"You are an expert ATS system. Analyze resumes and provide JSON response with: {\\\\\\"skills\\\\\\": [\\\\\\"skill1\\\\\\", \\\\\\"skill2\\\\\\"], \\\\\\"experience_years\\\\\\": number, \\\\\\"education_level\\\\\\": \\\\\\"string\\\\\\", \\\\\\"keywords_found\\\\\\": [\\\\\\"keyword1\\\\\\", \\\\\\"keyword2\\\\\\"], \\\\\\"technical_skills\\\\\\": [\\\\\\"tech1\\\\\\", \\\\\\"tech2\\\\\\"], \\\\\\"soft_skills\\\\\\": [\\\\\\"soft1\\\\\\", \\\\\\"soft2\\\\\\"], \\\\\\"certifications\\\\\\": [\\\\\\"cert1\\\\\\", \\\\\\"cert2\\\\\\"]}\\"\
    },\
    {\
      \\"role\\": \\"user\\",\
      \\"content\\": \\"Analyze this resume for ATS scoring:\\\
\\\
Candidate: \\" + $json.candidate.name + \\"\\\
Email: \\" + $json.candidate.email + \\"\\\
Resume Text: \\" + $json.candidate.resume_text\
    }\
  ],\
  \\"temperature\\": 0.1,\
  \\"max_tokens\\": 1000\
}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3
          }
        }
      },
      "name": "Groq Resume Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        640,
        900
      ]
    },
    {
      "parameters": {
        "functionCode": "// Calculate ATS score based on Groq analysis\
const candidateData = $input.first().json.candidate;\
const groqResponse = $input.first().json.choices[0].message.content;\
\
let analysis = {};\
try {\
  analysis = JSON.parse(groqResponse);\
} catch (error) {\
  console.log('Error parsing Groq response:', error);\
  analysis = {\
    skills: [],\
    experience_years: 0,\
    education_level: 'Unknown',\
    keywords_found: [],\
    technical_skills: [],\
    soft_skills: [],\
    certifications: []\
  };\
}\
\
// Scoring algorithm (0-100 points)\
let score = 0;\
\
// Skills match (0-30 points)\
const skillsScore = Math.min(analysis.skills.length * 2, 30);\
score += skillsScore;\
\
// Experience relevance (0-30 points)\
const expYears = analysis.experience_years || 0;\
let experienceScore = 0;\
if (expYears >= 5) experienceScore = 30;\
else if (expYears >= 3) experienceScore = 25;\
else if (expYears >= 1) experienceScore = 15;\
else experienceScore = 5;\
score += experienceScore;\
\
// Education assessment (0-20 points)\
const education = analysis.education_level.toLowerCase();\
let educationScore = 0;\
if (education.includes('master') || education.includes('mba')) educationScore = 20;\
else if (education.includes('bachelor') || education.includes('degree')) educationScore = 15;\
else if (education.includes('diploma') || education.includes('certificate')) educationScore = 10;\
else educationScore = 5;\
score += educationScore;\
\
// Keywords matching (0-20 points)\
const keywordsScore = Math.min(analysis.keywords_found.length * 2, 20);\
score += keywordsScore;\
\
// Bonus for certifications\
if (analysis.certifications && analysis.certifications.length > 0) {\
  score += Math.min(analysis.certifications.length * 2, 10);\
}\
\
// Ensure score is within 0-100 range\
score = Math.min(Math.max(score, 0), 100);\
\
// Update candidate data in static data\
const candidates = $workflow.staticData.candidates || [];\
const candidateIndex = candidates.findIndex(c => c.candidate_id === candidateData.candidate_id);\
if (candidateIndex !== -1) {\
  candidates[candidateIndex] = {\
    ...candidates[candidateIndex],\
    ats_score: score,\
    ats_analysis: analysis,\
    status: 'ats_scored',\
    ats_scored_date: new Date().toISOString()\
  };\
  $workflow.staticData.candidates = candidates;\
}\
\
return [{\
  json: {\
    success: true,\
    candidate_id: candidateData.candidate_id,\
    ats_score: score,\
    analysis: analysis\
  }\
}];"
      },
      "name": "Calculate ATS Score",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        860,
        900
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 0 * * *"
            }
          ]
        }
      },
      "name": "Daily Shortlisting",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        1200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Rank candidates by ATS score and select top 50\
const candidates = $workflow.staticData.candidates || [];\
\
// Filter candidates with ATS scores\
const scoredCandidates = candidates.filter(c => c.ats_score > 0 && c.status === 'ats_scored');\
\
if (scoredCandidates.length === 0) {\
  return [{\
    json: {\
      success: false,\
      message: 'No scored candidates found',\
      shortlisted: [],\
      rejected: []\
    }\
  }];\
}\
\
// Sort by ATS score (descending)\
scoredCandidates.sort((a, b) => b.ats_score - a.ats_score);\
\
// Select top 50 candidates\
const shortlisted = scoredCandidates.slice(0, 50);\
const rejected = scoredCandidates.slice(50);\
\
// Update candidate statuses\
scoredCandidates.forEach((candidate, index) => {\
  const candidateIndex = candidates.findIndex(c => c.candidate_id === candidate.candidate_id);\
  if (candidateIndex !== -1) {\
    if (index < 50) {\
      candidates[candidateIndex].status = 'shortlisted';\
      candidates[candidateIndex].shortlisted_date = new Date().toISOString();\
    } else {\
      candidates[candidateIndex].status = 'ats_rejected';\
      candidates[candidateIndex].ats_rejected_date = new Date().toISOString();\
    }\
  }\
});\
\
$workflow.staticData.candidates = candidates;\
\
// Create shortlisted candidates summary\
const shortlistSummary = shortlisted.map(c => ({\
  candidate_id: c.candidate_id,\
  name: c.name,\
  email: c.email,\
  ats_score: c.ats_score,\
  job_id: c.job_id\
}));\
\
return [{\
  json: {\
    success: true,\
    message: `Shortlisted ${shortlisted.length} candidates, rejected ${rejected.length}`,\
    shortlisted: shortlistSummary,\
    rejected_count: rejected.length,\
    total_processed: scoredCandidates.length\
  }\
}];"
      },
      "name": "Rank & Select Top 50",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        1200
      ]
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "name": "Split for Email Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        640,
        1200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.shortlisted }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Check Shortlisted",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        860,
        1200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prepare shortlisted emails using template from static data\
const shortlisted = $input.first().json.shortlisted;\
\
if (!shortlisted || shortlisted.length === 0) {\
  return [];\
}\
\
const template = $workflow.staticData.email_templates?.shortlisted || \
  `<h2>ðŸŽ‰ Congratulations!</h2><p>Dear {{name}},</p><p>You've been selected! Your ATS Score: {{score}}/100</p><p>Best regards, HR Team</p>`;\
\
// Prepare emails\
return shortlisted.map(candidate => {\
  const personalizedEmail = template\
    .replace(/{{name}}/g, candidate.name)\
    .replace(/{{score}}/g, candidate.ats_score);\
  \
  return {\
    json: {\
      candidate_id: candidate.candidate_id,\
      name: candidate.name,\
      email: candidate.email,\
      subject: `Congratulations! You've been shortlisted - ${candidate.name}`,\
      html_content: personalizedEmail,\
      type: 'shortlisted'\
    }\
  };\
});"
      },
      "name": "Prepare Shortlisted Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1080,
        1150
      ]
    },
    {
      "parameters": {
        "fromEmail": "YOUR_GMAIL_ADDRESS",
        "toEmail": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "emailFormat": "html",
        "message": "={{ $json.html_content }}",
        "options": {}
      },
      "name": "Send Shortlisted Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1300,
        1150
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prepare rejected emails\
const candidates = $workflow.staticData.candidates || [];\
\
// Filter ATS rejected candidates who haven't received rejection email\
const rejectedCandidates = candidates.filter(c => \
  c.status === 'ats_rejected' && !c.rejection_email_sent\
);\
\
if (rejectedCandidates.length === 0) {\
  return [];\
}\
\
const template = $workflow.staticData.email_templates?.rejected || \
  `<h2>Thank You</h2><p>Dear {{name}},</p><p>Thank you for applying. We'll keep your profile for future opportunities.</p><p>Best regards, HR Team</p>`;\
\
// Mark as email sent\
rejectedCandidates.forEach(candidate => {\
  const candidateIndex = candidates.findIndex(c => c.candidate_id === candidate.candidate_id);\
  if (candidateIndex !== -1) {\
    candidates[candidateIndex].rejection_email_sent = true;\
    candidates[candidateIndex].rejection_email_date = new Date().toISOString();\
  }\
});\
\
$workflow.staticData.candidates = candidates;\
\
// Prepare emails\
return rejectedCandidates.map(candidate => {\
  const personalizedEmail = template.replace(/{{name}}/g, candidate.name);\
  \
  return {\
    json: {\
      candidate_id: candidate.candidate_id,\
      name: candidate.name,\
      email: candidate.email,\
      subject: `Thank you for your application - ${candidate.name}`,\
      html_content: personalizedEmail,\
      type: 'rejected'\
    }\
  };\
});"
      },
      "name": "Prepare Rejected Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1080,
        1250
      ]
    },
    {
      "parameters": {
        "fromEmail": "YOUR_GMAIL_ADDRESS",
        "toEmail": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "emailFormat": "html",
        "message": "={{ $json.html_content }}",
        "options": {}
      },
      "name": "Send Rejected Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1300,
        1250
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 9 * * 1-5"
            }
          ]
        }
      },
      "name": "Interview Scheduler",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        1500
      ]
    },
    {
      "parameters": {
        "functionCode": "// Schedule phone interviews for shortlisted candidates\
const candidates = $workflow.staticData.candidates || [];\
\
// Find shortlisted candidates who haven't been interviewed\
const pendingInterviews = candidates.filter(c => \
  c.status === 'shortlisted' && !c.interview_scheduled\
);\
\
if (pendingInterviews.length === 0) {\
  return [{\
    json: {\
      success: false,\
      message: 'No pending interviews to schedule',\
      interviews: []\
    }\
  }];\
}\
\
// Create interview questions\
const interviewQuestions = [\
  {\
    question: \\"Can you tell me about yourself and your professional background?\\",\
    category: \\"introduction\\",\
    expected_keywords: [\\"experience\\", \\"background\\", \\"skills\\", \\"career\\"],\
    max_score: 20\
  },\
  {\
    question: \\"Why are you interested in this position?\\", \
    category: \\"motivation\\",\
    expected_keywords: [\\"interest\\", \\"company\\", \\"role\\", \\"opportunity\\"],\
    max_score: 20\
  },\
  {\
    question: \\"What are your greatest strengths?\\",\
    category: \\"strengths\\",\
    expected_keywords: [\\"strengths\\", \\"skills\\", \\"abilities\\", \\"expertise\\"],\
    max_score: 20\
  }\
];\
\
// Schedule interviews (take first 10 for this batch)\
const toSchedule = pendingInterviews.slice(0, 10);\
const scheduled = [];\
\
toSchedule.forEach((candidate, index) => {\
  const interviewId = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\
  const scheduledTime = new Date();\
  scheduledTime.setMinutes(scheduledTime.getMinutes() + (index + 1) * 5);\
  \
  const interview = {\
    interview_id: interviewId,\
    candidate_id: candidate.candidate_id,\
    candidate_name: candidate.name,\
    candidate_phone: candidate.phone,\
    candidate_email: candidate.email,\
    scheduled_time: scheduledTime.toISOString(),\
    status: 'scheduled',\
    questions: interviewQuestions,\
    ats_score: candidate.ats_score\
  };\
  \
  scheduled.push(interview);\
  \
  // Mark candidate as interview scheduled\
  const candidateIndex = candidates.findIndex(c => c.candidate_id === candidate.candidate_id);\
  if (candidateIndex !== -1) {\
    candidates[candidateIndex].interview_scheduled = true;\
    candidates[candidateIndex].interview_id = interviewId;\
    candidates[candidateIndex].interview_scheduled_time = scheduledTime.toISOString();\
    candidates[candidateIndex].status = 'interview_scheduled';\
  }\
});\
\
// Update static data\
$workflow.staticData.candidates = candidates;\
\
const interviews = $workflow.staticData.interviews || [];\
interviews.push(...scheduled);\
$workflow.staticData.interviews = interviews;\
\
return scheduled.map(interview => ({ json: { interview } }));"
      },
      "name": "Schedule Phone Interviews",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        1500
      ]
    },
    {
      "parameters": {
        "url": "https://api.retellai.com/call",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer key_d64cb94a0929d6bf59cf2b4ff369"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\
  \\"from_number\\": \\"+1234567890\\",\
  \\"to_number\\": $json.interview.candidate_phone,\
  \\"agent_id\\": \\"agent_hr_interviewer\\",\
  \\"metadata\\": {\
    \\"candidate_id\\": $json.interview.candidate_id,\
    \\"interview_id\\": $json.interview.interview_id,\
    \\"candidate_name\\": $json.interview.candidate_name,\
    \\"ats_score\\": $json.interview.ats_score\
  }\
}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxAttempts": 2
          }
        }
      },
      "name": "Retell Voice Interview",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        640,
        1500
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process interview results and calculate interview score\
const interviewData = $input.first().json.interview;\
const callResponse = $input.first().json;\
\
// Mock interview processing (replace with actual Retell transcription)\
const mockResponses = [\
  \\"I have experience in software development with React and Node.js.\\",\
  \\"I'm interested because it aligns with my career goals.\\",\
  \\"My strength is problem-solving and teamwork.\\"\
];\
\
// Score responses\
const responses = interviewData.questions.map((q, index) => {\
  const response = mockResponses[index] || \\"Brief response provided.\\";\
  \
  let score = 0;\
  const responseWords = response.toLowerCase().split(/\\\\s+/);\
  const matchedKeywords = q.expected_keywords.filter(keyword => \
    responseWords.some(word => word.includes(keyword.toLowerCase()))\
  );\
  \
  score = Math.min((matchedKeywords.length / q.expected_keywords.length) * q.max_score, q.max_score);\
  \
  if (response.length > 50) score += 2;\
  \
  return {\
    question: q.question,\
    response: response,\
    score: Math.round(score),\
    max_score: q.max_score\
  };\
});\
\
// Calculate overall score\
const totalScore = responses.reduce((sum, r) => sum + r.score, 0);\
const maxPossibleScore = responses.reduce((sum, r) => sum + r.max_score, 0);\
const interviewScore = Math.round((totalScore / maxPossibleScore) * 100);\
\
// Update interview in static data\
const interviews = $workflow.staticData.interviews || [];\
const interviewIndex = interviews.findIndex(i => i.interview_id === interviewData.interview_id);\
if (interviewIndex !== -1) {\
  interviews[interviewIndex] = { \
    ...interviews[interviewIndex], \
    responses: responses,\
    overall_interview_score: interviewScore,\
    status: 'completed',\
    interview_date: new Date().toISOString()\
  };\
  $workflow.staticData.interviews = interviews;\
}\
\
// Update candidate with interview score\
const candidates = $workflow.staticData.candidates || [];\
const candidateIndex = candidates.findIndex(c => c.candidate_id === interviewData.candidate_id);\
if (candidateIndex !== -1) {\
  candidates[candidateIndex].interview_score = interviewScore;\
  candidates[candidateIndex].interview_completed = true;\
  candidates[candidateIndex].status = 'interviewed';\
  \
  // Calculate combined score (ATS 60% + Interview 40%)\
  const atsScore = candidates[candidateIndex].ats_score || 0;\
  const combinedScore = Math.round((atsScore * 0.6) + (interviewScore * 0.4));\
  candidates[candidateIndex].combined_score = combinedScore;\
  \
  $workflow.staticData.candidates = candidates;\
}\
\
return [{\
  json: {\
    success: true,\
    interview_id: interviewData.interview_id,\
    candidate_id: interviewData.candidate_id,\
    interview_score: interviewScore\
  }\
}];"
      },
      "name": "Process Interview Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        860,
        1500
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 18 * * 5"
            }
          ]
        }
      },
      "name": "Final Selection Friday",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        1800
      ]
    },
    {
      "parameters": {
        "functionCode": "// Select top 20 candidates based on combined scores\
const candidates = $workflow.staticData.candidates || [];\
\
// Filter candidates who completed interviews\
const interviewedCandidates = candidates.filter(c => \
  c.status === 'interviewed' && c.combined_score !== undefined && c.combined_score > 0\
);\
\
if (interviewedCandidates.length === 0) {\
  return [{\
    json: {\
      success: false,\
      message: 'No interviewed candidates found for final selection',\
      selected: [],\
      rejected: []\
    }\
  }];\
}\
\
// Sort by combined score (descending)\
interviewedCandidates.sort((a, b) => b.combined_score - a.combined_score);\
\
// Select top 20 candidates\
const selectedCandidates = interviewedCandidates.slice(0, 20);\
const rejectedCandidates = interviewedCandidates.slice(20);\
\
// Update candidate statuses\
interviewedCandidates.forEach((candidate, index) => {\
  const candidateIndex = candidates.findIndex(c => c.candidate_id === candidate.candidate_id);\
  if (candidateIndex !== -1) {\
    if (index < 20) {\
      candidates[candidateIndex].status = 'final_selected';\
      candidates[candidateIndex].final_selection_date = new Date().toISOString();\
    } else {\
      candidates[candidateIndex].status = 'interview_rejected';\
      candidates[candidateIndex].interview_rejection_date = new Date().toISOString();\
    }\
  }\
});\
\
$workflow.staticData.candidates = candidates;\
\
// Create selection summary\
const selectedSummary = selectedCandidates.map(c => ({\
  candidate_id: c.candidate_id,\
  name: c.name,\
  email: c.email,\
  phone: c.phone,\
  ats_score: c.ats_score,\
  interview_score: c.interview_score,\
  combined_score: c.combined_score\
}));\
\
return [{\
  json: {\
    success: true,\
    message: `Selected ${selectedCandidates.length} final candidates, rejected ${rejectedCandidates.length} after interview`,\
    selected: selectedSummary,\
    rejected_count: rejectedCandidates.length,\
    total_processed: interviewedCandidates.length\
  }\
}];"
      },
      "name": "Select Top 20 Final Candidates",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        1800
      ]
    },
    {
      "parameters": {
        "functionCode": "// Send final selection confirmation emails\
const selected = $input.first().json.selected;\
\
if (!selected || selected.length === 0) {\
  return [];\
}\
\
const finalTemplate = `\
<h2>ðŸŽ‰ Congratulations! You've Been Selected!</h2>\
<p>Dear {{name}},</p>\
<p><strong>Excellent news!</strong> You have been selected for the final round of interviews.</p>\
<div style=\\"background: #e8f5e8; border-left: 4px solid #4CAF50; padding: 15px; margin: 15px 0;\\">\
<h3>Your Assessment Results:</h3>\
<p><strong>ATS Score:</strong> {{ats_score}}/100</p>\
<p><strong>Interview Score:</strong> {{interview_score}}/100</p>\
<p><strong>Overall Score:</strong> {{combined_score}}/100</p>\
</div>\
<p><strong>Next Steps:</strong></p>\
<ul>\
<li>Our HR team will contact you within 48 hours</li>\
<li>Prepare for final interview discussion</li>\
<li>Have your references ready</li>\
</ul>\
<p>Best regards,<br>HR Team</p>`;\
\
// Prepare emails\
return selected.map(candidate => {\
  const personalizedEmail = finalTemplate\
    .replace(/{{name}}/g, candidate.name)\
    .replace(/{{ats_score}}/g, candidate.ats_score)\
    .replace(/{{interview_score}}/g, candidate.interview_score)\
    .replace(/{{combined_score}}/g, candidate.combined_score);\
  \
  return {\
    json: {\
      candidate_id: candidate.candidate_id,\
      name: candidate.name,\
      email: candidate.email,\
      subject: `ðŸŽ‰ Final Interview - ${candidate.name}`,\
      html_content: personalizedEmail,\
      type: 'final_selected'\
    }\
  };\
});"
      },
      "name": "Send Final Selection Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        640,
        1800
      ]
    },
    {
      "parameters": {
        "fromEmail": "YOUR_GMAIL_ADDRESS",
        "toEmail": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "emailFormat": "html",
        "message": "={{ $json.html_content }}",
        "options": {}
      },
      "name": "Send Final Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        860,
        1800
      ]
    }
  ],
  "connections": {
    "Job Posting Form": {
      "main": [
        [
          {
            "node": "Store Job Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Job Details": {
      "main": [
        [
          {
            "node": "Post to LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to LinkedIn": {
      "main": [
        [
          {
            "node": "Job Form Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resume Submission Webhook": {
      "main": [
        [
          {
            "node": "Validate Resume Submission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Resume Submission": {
      "main": [
        [
          {
            "node": "Store Resume Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Resume Data": {
      "main": [
        [
          {
            "node": "Resume Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ATS Scoring Schedule": {
      "main": [
        [
          {
            "node": "Load Pending Candidates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Pending Candidates": {
      "main": [
        [
          {
            "node": "Groq Resume Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Resume Analysis": {
      "main": [
        [
          {
            "node": "Calculate ATS Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Shortlisting": {
      "main": [
        [
          {
            "node": "Rank & Select Top 50",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank & Select Top 50": {
      "main": [
        [
          {
            "node": "Split for Email Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split for Email Batches": {
      "main": [
        [
          {
            "node": "Check Shortlisted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Shortlisted": {
      "main": [
        [
          {
            "node": "Prepare Shortlisted Emails",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Rejected Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Shortlisted Emails": {
      "main": [
        [
          {
            "node": "Send Shortlisted Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Rejected Emails": {
      "main": [
        [
          {
            "node": "Send Rejected Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Scheduler": {
      "main": [
        [
          {
            "node": "Schedule Phone Interviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Phone Interviews": {
      "main": [
        [
          {
            "node": "Retell Voice Interview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retell Voice Interview": {
      "main": [
        [
          {
            "node": "Process Interview Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Selection Friday": {
      "main": [
        [
          {
            "node": "Select Top 20 Final Candidates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Top 20 Final Candidates": {
      "main": [
        [
          {
            "node": "Send Final Selection Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Final Selection Emails": {
      "main": [
        [
          {
            "node": "Send Final Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "staticData": null
}
