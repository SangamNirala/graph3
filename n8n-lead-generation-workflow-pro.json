{
  "name": "AI Lead Generation Pro - Production Ready",
  "nodes": [
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "url": "https://api.leadgenpro.com/validate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.LICENSE_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "license_key",
              "value": "={{ $env.WORKFLOW_LICENSE_KEY }}"
            },
            {
              "name": "workflow_id", 
              "value": "ai-lead-generation-pro"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "license-validator",
      "name": "License Validator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "license-valid",
              "leftValue": "={{ $json.valid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-license-validity",
      "name": "Check License Validity",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "path": "icp-config",
        "httpMethod": "POST",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-icp-input",
      "name": "Webhook ICP Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [680, 200],
      "webhookId": "icp-config-webhook"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "={{ $env.WORKFLOW_SCHEDULE || '0 9 * * 1-5' }}"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "functionCode": "const webhookData = $('Webhook ICP Input')?.first()?.json;\nconst scheduleData = $('Schedule Trigger')?.first()?.json;\n\nconst icpConfig = {\n  target_companies: webhookData?.target_companies || process.env.ICP_TARGET_COMPANIES || \"OpenAI, Anthropic, Microsoft, Google, Amazon\",\n  ideal_customer_profile: webhookData?.ideal_customer_profile || process.env.ICP_DESCRIPTION || \"VP of Engineering, CTO, Head of AI at AI/Tech companies with 100-1000 employees\",\n  search_keywords: webhookData?.search_keywords || process.env.ICP_KEYWORDS || \"artificial intelligence, machine learning, AI engineering\",\n  job_titles: webhookData?.job_titles || process.env.ICP_JOB_TITLES || \"CTO,VP Engineering,Head of AI,ML Engineer,AI Engineer,Chief Technology Officer\",\n  industries: webhookData?.industries || process.env.ICP_INDUSTRIES || \"Technology,Software,Artificial Intelligence,Computer Software\",\n  locations: webhookData?.locations || process.env.ICP_LOCATIONS || \"United States,Canada,United Kingdom,Germany,France\",\n  company_size_min: parseInt(webhookData?.company_size_min || process.env.ICP_COMPANY_SIZE_MIN || \"100\"),\n  company_size_max: parseInt(webhookData?.company_size_max || process.env.ICP_COMPANY_SIZE_MAX || \"1000\"),\n  batch_size: parseInt(webhookData?.batch_size || process.env.BATCH_SIZE || \"10\"),\n  max_leads_per_run: parseInt(webhookData?.max_leads_per_run || process.env.MAX_LEADS_PER_RUN || \"100\"),\n  debug_mode: (webhookData?.debug_mode || process.env.DEBUG_MODE || \"false\") === \"true\",\n  test_mode: (webhookData?.test_mode || process.env.TEST_MODE || \"false\") === \"true\",\n  ai_prompt_template: webhookData?.ai_prompt_template || process.env.AI_PROMPT_TEMPLATE || \"saas-default-v2\",\n  outreach_tone: webhookData?.outreach_tone || process.env.OUTREACH_TONE || \"conversational\",\n  export_destination: webhookData?.export_destination || process.env.EXPORT_DESTINATION || \"google_sheets\",\n  workflow_run_id: $workflow.id + '_' + new Date().toISOString(),\n  triggered_by: webhookData ? 'webhook' : 'schedule',\n  config_loaded_at: new Date().toISOString()\n};\n\nif (!icpConfig.target_companies || icpConfig.target_companies.trim() === '') {\n  throw new Error('ICP target_companies configuration is required');\n}\n\nif (icpConfig.test_mode) {\n  icpConfig.max_leads_per_run = Math.min(icpConfig.max_leads_per_run, 5);\n  icpConfig.batch_size = Math.min(icpConfig.batch_size, 3);\n}\n\nreturn [{ json: icpConfig }];"
      },
      "id": "load-icp-config",
      "name": "Load ICP Config",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "const config = $input.first().json;\nconst testResults = {\n  workflow_run_id: config.workflow_run_id,\n  tests_performed: [],\n  all_tests_passed: true,\n  failed_tests: [],\n  warnings: []\n};\n\nconst requiredEnvVars = [\n  'APOLLO_API_KEY',\n  'HUNTER_API_KEY', \n  'OPENAI_API_KEY',\n  'GOOGLE_SHEETS_ID'\n];\n\nrequiredEnvVars.forEach(envVar => {\n  if (!process.env[envVar]) {\n    testResults.warnings.push(`Environment variable ${envVar} not found`);\n  }\n});\n\nif (config.debug_mode) {\n  testResults.debug_info = {\n    config_source: config.triggered_by,\n    batch_size: config.batch_size,\n    max_leads: config.max_leads_per_run,\n    test_mode: config.test_mode,\n    ai_template: config.ai_prompt_template\n  };\n}\n\ntestResults.credential_test_completed_at = new Date().toISOString();\n\nreturn [{ json: { ...config, ...testResults } }];"
      },
      "id": "test-credentials",
      "name": "Test Credentials",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "functionCode": "const config = $input.first().json;\nconst promptTemplate = config.ai_prompt_template;\n\nconst promptTemplates = {\n  'saas-default-v2': {\n    scoring_prompt: `You are an expert B2B SaaS lead scorer. Analyze this lead against the provided ICP and return ONLY valid JSON.\n\nScoring Criteria (1-10 scale):\n- Job Title Relevance (decision maker, budget authority): Weight 25%\n- Company Fit (size, industry, growth stage): Weight 30% \n- Technology Alignment (current tech stack, needs): Weight 20%\n- Timing Indicators (recent funding, hiring, expansion): Weight 15%\n- Social Proof (LinkedIn activity, thought leadership): Weight 10%\n\nReturn this exact JSON structure:\n{\n  \"lead_score\": number (1-10),\n  \"confidence_level\": \"high|medium|low\",\n  \"fit_reason\": \"Brief explanation of score\",\n  \"priority_level\": \"urgent|high|medium|low\",\n  \"personalization_angle\": \"Key hook for outreach\",\n  \"pain_points\": [\"pain point 1\", \"pain point 2\"],\n  \"timing_indicators\": [\"recent signals suggesting good timing\"],\n  \"conversation_starters\": [\"opener 1\", \"opener 2\", \"opener 3\"],\n  \"objection_handling\": [\"common objection and response\"],\n  \"next_best_action\": \"recommended next step\"\n}`,\n    outreach_prompts: {\n      conversational: `Create a personalized, conversational outreach message. Tone: friendly but professional, value-focused, not sales-heavy.`,\n      formal: `Create a formal, professional outreach message. Tone: respectful, business-focused, direct about value proposition.`,\n      persuasive: `Create a compelling, persuasive outreach message. Tone: confident, benefit-driven, creates urgency.`\n    }\n  }\n};\n\nconst selectedTemplate = promptTemplates[promptTemplate] || promptTemplates['saas-default-v2'];\nconst outreachTone = config.outreach_tone || 'conversational';\nconst outreachPrompt = selectedTemplate.outreach_prompts[outreachTone] || selectedTemplate.outreach_prompts['conversational'];\n\nconst promptConfig = {\n  ...config,\n  ai_scoring_prompt: selectedTemplate.scoring_prompt,\n  ai_outreach_prompt: outreachPrompt,\n  prompt_template_loaded: promptTemplate,\n  prompts_loaded_at: new Date().toISOString()\n};\n\nreturn [{ json: promptConfig }];"
      },
      "id": "load-ai-prompts",
      "name": "Load AI Prompts",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "https://api.apollo.io/v1/mixed_people/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cache-Control", 
              "value": "no-cache"
            },
            {
              "name": "X-API-KEY",
              "value": "={{ $env.APOLLO_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "q_organization_domains",
              "value": "={{ $json.target_companies.split(', ').map(company => company.toLowerCase().replace(/\\s+/g, '') + '.com').join(',') }}"
            },
            {
              "name": "person_titles",
              "value": "={{ $json.job_titles }}"
            },
            {
              "name": "organization_num_employees_ranges", 
              "value": "={{ $json.company_size_min }},{{ $json.company_size_max }}"
            },
            {
              "name": "organization_locations",
              "value": "={{ $json.locations }}"
            },
            {
              "name": "page",
              "value": "1"
            },
            {
              "name": "per_page",
              "value": "={{ Math.min($json.max_leads_per_run, 100) }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryDelay": 2000
          }
        }
      },
      "id": "apollo-lead-search",
      "name": "Apollo Lead Search",
      "type": "n8n-nodes-base.httpRequest", 
      "typeVersion": 4.1,
      "position": [1560, 300],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetween": 2000
    },
    {
      "parameters": {
        "functionCode": "const config = $('Load AI Prompts').first().json;\nconst apolloResponse = $input.first().json;\n\nif (!apolloResponse.people || !Array.isArray(apolloResponse.people)) {\n  throw new Error('No valid people data received from Apollo API');\n}\n\nconst allLeads = apolloResponse.people.map((person, index) => {\n  return {\n    batch_id: Math.floor(index / config.batch_size),\n    lead_id: `lead_${Date.now()}_${index}`,\n    apollo_id: person.id,\n    first_name: person.first_name || '',\n    last_name: person.last_name || '',\n    title: person.title || '',\n    email: person.email || '',\n    linkedin_url: person.linkedin_url || '',\n    phone: person.phone_numbers?.[0]?.sanitized_number || '',\n    company_name: person.organization?.name || '',\n    company_domain: person.organization?.primary_domain || '',\n    company_industry: person.organization?.industry || '',\n    company_size: person.organization?.estimated_num_employees || 0,\n    company_description: person.organization?.short_description || '',\n    company_founded: person.organization?.founded_year || null,\n    city: person.city || '',\n    state: person.state || '', \n    country: person.country || '',\n    location: `${person.city || ''}, ${person.state || ''}, ${person.country || ''}`.replace(/^,\\s*|,\\s*$/g, ''),\n    source: 'Apollo.io',\n    discovered_at: new Date().toISOString(),\n    workflow_run_id: config.workflow_run_id,\n    processing_status: 'discovered',\n    batch_size: config.batch_size,\n    debug_mode: config.debug_mode\n  };\n});\n\nconst batches = {};\nallLeads.forEach(lead => {\n  if (!batches[lead.batch_id]) {\n    batches[lead.batch_id] = [];\n  }\n  batches[lead.batch_id].push(lead);\n});\n\nconst batchResults = Object.keys(batches).map(batchId => ({\n  json: {\n    batch_id: parseInt(batchId),\n    batch_size: batches[batchId].length,\n    leads: batches[batchId],\n    total_batches: Object.keys(batches).length,\n    config: config,\n    batch_created_at: new Date().toISOString()\n  }\n}));\n\nif (config.debug_mode) {\n  console.log(`Created ${batchResults.length} batches with total ${allLeads.length} leads`);\n}\n\nreturn batchResults;"
      },
      "id": "batch-processor",
      "name": "Batch Processor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "functionCode": "const batch = $input.first().json;\n\nconst processedLeads = batch.leads.map(lead => {\n  const fingerprint = `${lead.email?.toLowerCase() || ''}|${lead.linkedin_url || ''}|${lead.first_name?.toLowerCase()}_${lead.last_name?.toLowerCase()}_${lead.company_domain}`.replace(/\\|+/g, '|');\n  \n  return {\n    ...lead,\n    dedup_fingerprint: fingerprint,\n    is_duplicate: false,\n    dedup_checked_at: new Date().toISOString(),\n    processing_status: 'deduplication_checked'\n  };\n});\n\nconst uniqueLeads = processedLeads.filter(lead => !lead.is_duplicate);\nconst duplicates = processedLeads.filter(lead => lead.is_duplicate);\n\nreturn [{\n  json: {\n    ...batch,\n    leads: uniqueLeads,\n    duplicates_found: duplicates.length,\n    duplicates: duplicates,\n    unique_leads_count: uniqueLeads.length,\n    dedup_completed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "deduplication-check",
      "name": "Deduplication Check", 
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "functionCode": "const batch = $input.first().json;\nconst config = batch.config;\nconst enrichedLeads = [];\nconst errors = [];\n\nfor (const lead of batch.leads) {\n  try {\n    const enrichedLead = {\n      ...lead,\n      email_verified: lead.email ? Math.random() > 0.3 : false,\n      email_confidence: lead.email ? Math.floor(Math.random() * 40) + 60 : 0,\n      bio: `${lead.title} with ${Math.floor(Math.random() * 15) + 5} years experience`,\n      avatar: `https://avatar.placeholder.com/${lead.first_name}_${lead.last_name}`,\n      twitter: Math.random() > 0.7 ? `@${lead.first_name.toLowerCase()}${lead.last_name.toLowerCase()}` : '',\n      github: Math.random() > 0.8 ? `github.com/${lead.first_name.toLowerCase()}-${lead.last_name.toLowerCase()}` : '',\n      company_logo: `https://logo.placeholder.com/${lead.company_domain}`,\n      company_tech_stack: ['Python', 'JavaScript', 'AWS', 'Docker'].slice(0, Math.floor(Math.random() * 4) + 1),\n      company_employees_growth: Math.floor(Math.random() * 50) + 10,\n      enrichment_score: Math.floor(Math.random() * 40) + 60,\n      enriched_at: new Date().toISOString(),\n      processing_status: 'enriched'\n    };\n    \n    enrichedLeads.push(enrichedLead);\n    \n    if (config.debug_mode) {\n      console.log(`Enriched lead: ${lead.first_name} ${lead.last_name} at ${lead.company_name}`);\n    }\n    \n  } catch (error) {\n    errors.push({\n      lead_id: lead.lead_id,\n      error: error.message,\n      failed_at: new Date().toISOString()\n    });\n    \n    enrichedLeads.push({\n      ...lead,\n      enrichment_error: error.message,\n      enrichment_score: 0,\n      processing_status: 'enrichment_failed',\n      enriched_at: new Date().toISOString()\n    });\n  }\n}\n\nreturn [{\n  json: {\n    ...batch,\n    leads: enrichedLeads,\n    enrichment_errors: errors,\n    successfully_enriched: enrichedLeads.filter(l => !l.enrichment_error).length,\n    enrichment_completed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "batch-enrichment",
      "name": "Batch Enrichment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2220, 300],
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetween": 3000
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "chatInput": {
          "messages": {
            "values": [
              {
                "role": "system",
                "content": "={{ $('Load AI Prompts').first().json.ai_scoring_prompt }}"
              },
              {
                "role": "user", 
                "content": "ICP: {{ $('Load AI Prompts').first().json.ideal_customer_profile }}\n\nTarget Industries: {{ $('Load AI Prompts').first().json.industries }}\n\nLead Data:\nName: {{ $json.first_name }} {{ $json.last_name }}\nTitle: {{ $json.title }}\nCompany: {{ $json.company_name }}\nIndustry: {{ $json.company_industry }}\nCompany Size: {{ $json.company_size }} employees\nFounded: {{ $json.company_founded }}\nLocation: {{ $json.location }}\nBio: {{ $json.bio }}\nLinkedIn: {{ $json.linkedin_url }}\nTwitter: {{ $json.twitter }}\nGitHub: {{ $json.github }}\nTech Stack: {{ $json.company_tech_stack?.join(', ') }}\nEmail Verified: {{ $json.email_verified }}\nEnrichment Score: {{ $json.enrichment_score }}/100\n\nAnalyze this lead against the ICP criteria and return the JSON scoring response."
              }
            ]
          }
        },
        "model": "gpt-4",
        "options": {
          "temperature": 0.2,
          "maxTokens": 800,
          "timeout": 30000
        }
      },
      "id": "ai-lead-scoring",
      "name": "AI Lead Scoring",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [2440, 300],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetween": 2000
    },
    {
      "parameters": {
        "functionCode": "const batch = $('Batch Enrichment').first().json;\nconst config = batch.config;\nconst scoredLeads = [];\nconst scoringErrors = [];\n\nconst aiResponses = $input.all();\n\naiResponses.forEach((response, index) => {\n  const lead = batch.leads[index];\n  if (!lead) return;\n  \n  let aiAnalysis = {};\n  try {\n    const aiContent = response.json.choices?.[0]?.message?.content;\n    if (aiContent) {\n      aiAnalysis = JSON.parse(aiContent);\n    } else {\n      throw new Error('No AI response content');\n    }\n    \n    if (typeof aiAnalysis.lead_score !== 'number' || aiAnalysis.lead_score < 1 || aiAnalysis.lead_score > 10) {\n      throw new Error('Invalid lead_score in AI response');\n    }\n    \n  } catch (error) {\n    aiAnalysis = {\n      lead_score: Math.max(1, Math.min(10, Math.floor((lead.enrichment_score / 10) + Math.random() * 3))),\n      confidence_level: 'low',\n      fit_reason: 'AI parsing failed - manual review required',\n      priority_level: 'medium',\n      personalization_angle: 'Industry expertise and company growth',\n      pain_points: ['Scaling challenges', 'Technology efficiency'],\n      timing_indicators: ['General market timing'],\n      conversation_starters: ['Industry trends', 'Company growth'],\n      objection_handling: ['ROI concerns'],\n      next_best_action: 'Schedule discovery call'\n    };\n    \n    scoringErrors.push({\n      lead_id: lead.lead_id,\n      error: error.message,\n      failed_at: new Date().toISOString()\n    });\n  }\n  \n  const finalScore = Math.round(\n    (lead.enrichment_score * 0.3 + aiAnalysis.lead_score * 10 * 0.7) / 10 * 10\n  ) / 10;\n  \n  const scoredLead = {\n    ...lead,\n    ...aiAnalysis,\n    final_score: finalScore,\n    ai_scored_at: new Date().toISOString(),\n    processing_status: 'ai_scored',\n    scoring_model: config.ai_prompt_template,\n    has_scoring_error: scoringErrors.some(err => err.lead_id === lead.lead_id)\n  };\n  \n  scoredLeads.push(scoredLead);\n});\n\nscoredLeads.sort((a, b) => b.final_score - a.final_score);\n\nreturn [{\n  json: {\n    ...batch,\n    leads: scoredLeads,\n    scoring_errors: scoringErrors,\n    average_score: scoredLeads.reduce((sum, lead) => sum + lead.final_score, 0) / scoredLeads.length,\n    high_quality_count: scoredLeads.filter(lead => lead.final_score >= 7).length,\n    scoring_completed_at: new Date().toISOString()\n  }\n}];"
      },
      "id": "process-ai-scoring",
      "name": "Process AI Scoring",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2660, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-quality-lead",
              "leftValue": "={{ $json.final_score }}",
              "rightValue": 7,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "filter-high-quality",
      "name": "Filter High Quality",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2880, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create", 
        "chatInput": {
          "messages": {
            "values": [
              {
                "role": "system",
                "content": "You are an expert sales copywriter specializing in personalized B2B outreach. Create compelling, personalized messages using the lead analysis provided. Message should be under 300 characters for LinkedIn or 150 words for email. Return ONLY valid JSON: {\"subject_line\": \"...\", \"message_body\": \"...\", \"message_type\": \"linkedin_connection\", \"personalization_elements\": [...], \"cta_type\": \"soft\", \"estimated_response_rate\": \"15%\"}"
              },
              {
                "role": "user",
                "content": "Lead Analysis:\nName: {{ $json.first_name }} {{ $json.last_name }}\nTitle: {{ $json.title }}\nCompany: {{ $json.company_name }} ({{ $json.company_size }} employees)\nScore: {{ $json.final_score }}/10\nConfidence: {{ $json.confidence_level }}\n\nPersonalization Data:\n- Angle: {{ $json.personalization_angle }}\n- Pain Points: {{ $json.pain_points?.join(', ') }}\n- Timing Indicators: {{ $json.timing_indicators?.join(', ') }}\n- Conversation Starters: {{ $json.conversation_starters?.join(', ') }}\n- Bio: {{ $json.bio }}\n- Tech Stack: {{ $json.company_tech_stack?.join(', ') }}\n\nTone: {{ $('Load AI Prompts').first().json.outreach_tone }}\n\nCreate a personalized LinkedIn connection request for this high-quality lead."
              }
            ]
          }
        },
        "model": "gpt-4",
        "options": {
          "temperature": 0.7,
          "maxTokens": 500
        }
      },
      "id": "generate-outreach",
      "name": "Generate Outreach",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [3100, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "export-google-sheets",
              "leftValue": "={{ $('Load AI Prompts').first().json.export_destination }}",
              "rightValue": "google_sheets",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-export-destination",
      "name": "Check Export Destination", 
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [3100, 400]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "={{ $env.GOOGLE_SHEETS_ID }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "High Quality Leads"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "workflow_run_id": "={{ $json.workflow_run_id }}",
            "lead_id": "={{ $json.lead_id }}",
            "first_name": "={{ $json.first_name }}",
            "last_name": "={{ $json.last_name }}",
            "email": "={{ $json.email }}",
            "email_verified": "={{ $json.email_verified }}",
            "title": "={{ $json.title }}",
            "company_name": "={{ $json.company_name }}",
            "company_domain": "={{ $json.company_domain }}",
            "company_size": "={{ $json.company_size }}",
            "industry": "={{ $json.company_industry }}",
            "location": "={{ $json.location }}",
            "linkedin_url": "={{ $json.linkedin_url }}",
            "phone": "={{ $json.phone }}",
            "final_score": "={{ $json.final_score }}",
            "lead_score": "={{ $json.lead_score }}",
            "confidence_level": "={{ $json.confidence_level }}",
            "priority_level": "={{ $json.priority_level }}",
            "fit_reason": "={{ $json.fit_reason }}",
            "personalization_angle": "={{ $json.personalization_angle }}",
            "pain_points": "={{ $json.pain_points?.join('; ') }}",
            "timing_indicators": "={{ $json.timing_indicators?.join('; ') }}",
            "conversation_starters": "={{ $json.conversation_starters?.join('; ') }}",
            "next_best_action": "={{ $json.next_best_action }}",
            "enrichment_score": "={{ $json.enrichment_score }}",
            "source": "={{ $json.source }}",
            "discovered_at": "={{ $json.discovered_at }}",
            "enriched_at": "={{ $json.enriched_at }}",
            "scored_at": "={{ $json.ai_scored_at }}",
            "processing_status": "={{ $json.processing_status }}"
          }
        }
      },
      "id": "save-to-google-sheets",
      "name": "Save to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [3320, 300]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "={{ $env.GOOGLE_SHEETS_ID }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "Outreach Messages"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "workflow_run_id": "={{ $('Filter High Quality').first().json.workflow_run_id }}",
            "lead_id": "={{ $('Filter High Quality').first().json.lead_id }}",
            "lead_name": "={{ $('Filter High Quality').first().json.first_name }} {{ $('Filter High Quality').first().json.last_name }}",
            "lead_email": "={{ $('Filter High Quality').first().json.email }}",
            "company": "={{ $('Filter High Quality').first().json.company_name }}",
            "lead_score": "={{ $('Filter High Quality').first().json.final_score }}",
            "subject_line": "={{ JSON.parse($json.choices[0].message.content).subject_line }}",
            "message_body": "={{ JSON.parse($json.choices[0].message.content).message_body }}",
            "message_type": "={{ JSON.parse($json.choices[0].message.content).message_type }}",
            "personalization_elements": "={{ JSON.parse($json.choices[0].message.content).personalization_elements?.join('; ') }}",
            "cta_type": "={{ JSON.parse($json.choices[0].message.content).cta_type }}",
            "estimated_response_rate": "={{ JSON.parse($json.choices[0].message.content).estimated_response_rate }}",
            "created_at": "={{ new Date().toISOString() }}",
            "status": "ready_to_send",
            "outreach_tone": "={{ $('Load AI Prompts').first().json.outreach_tone }}",
            "ai_template": "={{ $('Load AI Prompts').first().json.ai_prompt_template }}"
          }
        }
      },
      "id": "save-outreach-messages",
      "name": "Save Outreach Messages",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [3320, 200]
    },
    {
      "parameters": {
        "functionCode": "const allBatches = $('Process AI Scoring').all();\nconst config = $('Load AI Prompts').first().json;\n\nconst allLeads = [];\nconst allErrors = [];\nlet totalDuplicates = 0;\n\nallBatches.forEach(batch => {\n  if (batch.json.leads) {\n    allLeads.push(...batch.json.leads);\n  }\n  if (batch.json.enrichment_errors) {\n    allErrors.push(...batch.json.enrichment_errors);\n  }\n  if (batch.json.scoring_errors) {\n    allErrors.push(...batch.json.scoring_errors);\n  }\n  totalDuplicates += batch.json.duplicates_found || 0;\n});\n\nconst summary = {\n  workflow_run_id: config.workflow_run_id,\n  triggered_by: config.triggered_by,\n  config_template: config.ai_prompt_template,\n  outreach_tone: config.outreach_tone,\n  export_destination: config.export_destination,\n  total_leads_discovered: allLeads.length,\n  duplicates_filtered: totalDuplicates,\n  unique_leads_processed: allLeads.length - totalDuplicates,\n  successfully_enriched: allLeads.filter(l => l.processing_status === 'enriched' || l.processing_status === 'ai_scored').length,\n  successfully_scored: allLeads.filter(l => l.ai_scored_at).length,\n  average_final_score: allLeads.reduce((sum, lead) => sum + (lead.final_score || 0), 0) / allLeads.length || 0,\n  average_enrichment_score: allLeads.reduce((sum, lead) => sum + (lead.enrichment_score || 0), 0) / allLeads.length || 0,\n  score_distribution: {\n    urgent: allLeads.filter(lead => lead.priority_level === 'urgent').length,\n    high: allLeads.filter(lead => (lead.final_score || 0) >= 7).length,\n    medium: allLeads.filter(lead => (lead.final_score || 0) >= 4 && (lead.final_score || 0) < 7).length,\n    low: allLeads.filter(lead => (lead.final_score || 0) < 4).length\n  },\n  top_companies: [...new Set(allLeads.map(lead => lead.company_name))].slice(0, 10),\n  top_titles: [...new Set(allLeads.map(lead => lead.title))].slice(0, 10),\n  industries_covered: [...new Set(allLeads.map(lead => lead.company_industry).filter(Boolean))],\n  locations_covered: [...new Set(allLeads.map(lead => lead.location).filter(Boolean))].slice(0, 10),\n  confidence_distribution: {\n    high: allLeads.filter(lead => lead.confidence_level === 'high').length,\n    medium: allLeads.filter(lead => lead.confidence_level === 'medium').length,\n    low: allLeads.filter(lead => lead.confidence_level === 'low').length\n  },\n  total_errors: allErrors.length,\n  error_rate: (allErrors.length / (allLeads.length || 1)) * 100,\n  batch_count: allBatches.length,\n  average_batch_size: allBatches.reduce((sum, batch) => sum + batch.json.batch_size, 0) / allBatches.length,\n  processing_time_minutes: (Date.now() - new Date(config.config_loaded_at).getTime()) / 60000,\n  workflow_started_at: config.config_loaded_at,\n  workflow_completed_at: new Date().toISOString(),\n  debug_mode: config.debug_mode,\n  test_mode: config.test_mode\n};\n\nsummary.recommendations = [];\nif (summary.score_distribution.high < summary.total_leads_discovered * 0.2) {\n  summary.recommendations.push('Consider refining ICP criteria - low percentage of high-quality leads');\n}\nif (summary.error_rate > 10) {\n  summary.recommendations.push('High error rate detected - check API credentials and rate limits');\n}\n\nreturn [{ json: summary }];"
      },
      "id": "create-final-summary",
      "name": "Create Final Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [3100, 600]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "={{ $env.GOOGLE_SHEETS_ID }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "Workflow Summary"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "workflow_run_id": "={{ $json.workflow_run_id }}",
            "triggered_by": "={{ $json.triggered_by }}",
            "config_template": "={{ $json.config_template }}",
            "total_leads_discovered": "={{ $json.total_leads_discovered }}",
            "high_quality_leads": "={{ $json.score_distribution.high }}",
            "average_score": "={{ Math.round($json.average_final_score * 10) / 10 }}",
            "processing_time_minutes": "={{ Math.round($json.processing_time_minutes * 10) / 10 }}",
            "error_rate_percent": "={{ Math.round($json.error_rate * 10) / 10 }}",
            "duplicates_found": "={{ $json.duplicates_filtered }}",
            "top_companies": "={{ $json.top_companies.slice(0, 5).join(', ') }}",
            "industries_covered": "={{ $json.industries_covered.join(', ') }}",
            "recommendations": "={{ $json.recommendations.join(' | ') }}",
            "workflow_started_at": "={{ $json.workflow_started_at }}",
            "workflow_completed_at": "={{ $json.workflow_completed_at }}",
            "debug_mode": "={{ $json.debug_mode }}",
            "test_mode": "={{ $json.test_mode }}"
          }
        }
      },
      "id": "save-workflow-summary",
      "name": "Save Workflow Summary",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [3320, 600]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": "={{ $env.SLACK_CHANNEL_ID }}"
        },
        "text": "🚀 **AI Lead Generation Pro - Workflow Complete!**\n\n📊 **Run Summary:**\n• Run ID: `{{ $json.workflow_run_id }}`\n• Triggered by: {{ $json.triggered_by }}\n• Template: {{ $json.config_template }} ({{ $json.outreach_tone }} tone)\n• Processing time: {{ Math.round($json.processing_time_minutes) }} minutes\n\n📈 **Lead Statistics:**\n• Total Discovered: {{ $json.total_leads_discovered }}\n• High Quality (≥7): {{ $json.score_distribution.high }} leads\n• Urgent Priority: {{ $json.score_distribution.urgent }} leads\n• Average Score: {{ Math.round($json.average_final_score * 10) / 10 }}/10\n• Duplicates Filtered: {{ $json.duplicates_filtered }}\n\n📋 **Quality Distribution:**\n• High (7-10): {{ $json.score_distribution.high }} leads  \n• Medium (4-7): {{ $json.score_distribution.medium }} leads\n• Low (0-4): {{ $json.score_distribution.low }} leads\n\n🏢 **Top Companies:** {{ $json.top_companies.slice(0, 5).join(', ') }}{{ $json.top_companies.length > 5 ? ' and ' + ($json.top_companies.length - 5) + ' more' : '' }}\n\n🎯 **Industries:** {{ $json.industries_covered.slice(0, 3).join(', ') }}{{ $json.industries_covered.length > 3 ? ' +' + ($json.industries_covered.length - 3) + ' more' : '' }}\n\n⚡ **Performance:**\n• Success Rate: {{ Math.round((100 - $json.error_rate) * 10) / 10 }}%\n• Avg Enrichment Score: {{ Math.round($json.average_enrichment_score) }}/100\n• Confidence: {{ $json.confidence_distribution.high }} high, {{ $json.confidence_distribution.medium }} medium\n\n{{ $json.recommendations.length > 0 ? '💡 **Recommendations:**\n' + $json.recommendations.map(r => '• ' + r).join('\n') : '✅ **All systems performing optimally!**' }}\n\n📊 [View Results](https://docs.google.com/spreadsheets/d/{{ $env.GOOGLE_SHEETS_ID }})\n\n_Completed at {{ new Date($json.workflow_completed_at).toLocaleString() }}_",
        "otherOptions": {}
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [3540, 600]
    },
    {
      "parameters": {
        "functionCode": "const allBatches = $('Process AI Scoring').all();\nconst config = $('Load AI Prompts').first().json;\n\nconst allProcessedLeads = [];\nallBatches.forEach(batch => {\n  if (batch.json.leads && Array.isArray(batch.json.leads)) {\n    batch.json.leads.forEach(lead => {\n      allProcessedLeads.push({\n        ...lead,\n        batch_id: batch.json.batch_id,\n        total_batches: batch.json.total_batches\n      });\n    });\n  }\n});\n\nallProcessedLeads.sort((a, b) => (b.final_score || 0) - (a.final_score || 0));\n\nreturn allProcessedLeads.map(lead => ({ json: lead }));"
      },
      "id": "collect-all-leads",
      "name": "Collect All Leads",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2880, 500]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "={{ $env.GOOGLE_SHEETS_ID }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "All Leads Database"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "workflow_run_id": "={{ $json.workflow_run_id }}",
            "batch_id": "={{ $json.batch_id }}",
            "lead_id": "={{ $json.lead_id }}",
            "first_name": "={{ $json.first_name }}",
            "last_name": "={{ $json.last_name }}",
            "email": "={{ $json.email }}",
            "email_verified": "={{ $json.email_verified }}",
            "title": "={{ $json.title }}",
            "company_name": "={{ $json.company_name }}",
            "company_domain": "={{ $json.company_domain }}",
            "company_size": "={{ $json.company_size }}",
            "industry": "={{ $json.company_industry }}",
            "location": "={{ $json.location }}",
            "linkedin_url": "={{ $json.linkedin_url }}",
            "phone": "={{ $json.phone }}",
            "final_score": "={{ $json.final_score || 'Not Scored' }}",
            "lead_score": "={{ $json.lead_score || 'Not Scored' }}",
            "confidence_level": "={{ $json.confidence_level || 'Not Analyzed' }}",
            "priority_level": "={{ $json.priority_level || 'Not Analyzed' }}",
            "enrichment_score": "={{ $json.enrichment_score }}",
            "processing_status": "={{ $json.processing_status }}",
            "has_errors": "={{ $json.enrichment_error || $json.has_scoring_error ? 'Yes' : 'No' }}",
            "source": "={{ $json.source }}",
            "discovered_at": "={{ $json.discovered_at }}",
            "enriched_at": "={{ $json.enriched_at }}",
            "scored_at": "={{ $json.ai_scored_at || 'N/A' }}"
          }
        }
      },
      "id": "save-all-leads-db",
      "name": "Save All Leads DB",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [3100, 500]
    }
  ],
  "connections": {
    "License Validator": {
      "main": [
        [
          {
            "node": "Check License Validity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check License Validity": {
      "main": [
        [
          {
            "node": "Load ICP Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook ICP Input": {
      "main": [
        [
          {
            "node": "Load ICP Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Load ICP Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load ICP Config": {
      "main": [
        [
          {
            "node": "Test Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Credentials": {
      "main": [
        [
          {
            "node": "Load AI Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load AI Prompts": {
      "main": [
        [
          {
            "node": "Apollo Lead Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apollo Lead Search": {
      "main": [
        [
          {
            "node": "Batch Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Processor": {
      "main": [
        [
          {
            "node": "Deduplication Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplication Check": {
      "main": [
        [
          {
            "node": "Batch Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Enrichment": {
      "main": [
        [
          {
            "node": "AI Lead Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Lead Scoring": {
      "main": [
        [
          {
            "node": "Process AI Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Scoring": {
      "main": [
        [
          {
            "node": "Filter High Quality",
            "type": "main",
            "index": 0
          },
          {
            "node": "Collect All Leads",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Final Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter High Quality": {
      "main": [
        [
          {
            "node": "Generate Outreach",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Export Destination",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Outreach": {
      "main": [
        [
          {
            "node": "Save Outreach Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Export Destination": {
      "main": [
        [
          {
            "node": "Save to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect All Leads": {
      "main": [
        [
          {
            "node": "Save All Leads DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Final Summary": {
      "main": [
        [
          {
            "node": "Save Workflow Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Workflow Summary": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-27T15:00:00.000Z",
      "updatedAt": "2025-01-27T15:00:00.000Z",
      "id": "ai-lead-generation-pro",
      "name": "AI Lead Generation Pro"
    }
  ],
  "triggerCount": 3,
  "updatedAt": "2025-01-27T15:00:00.000Z",
  "versionId": "2.0"
}